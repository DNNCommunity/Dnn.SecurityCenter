//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { DnnServicesFramework } from '@dnncommunity/dnn-elements';
export class ClientBase {

  private sf: DnnServicesFramework;
  private moduleId: number;

  constructor(configuration: ConfigureRequest) {
    this.moduleId = configuration.moduleId;
    this.sf = new DnnServicesFramework(this.moduleId);
  }

  protected getBaseUrl(_defaultUrl: string, baseUrl?: string): string {
    baseUrl = this.sf.getServiceRoot("DNNCommunity_SecurityCenter");

    // Strips the last / if present for future concatenations
    baseUrl = baseUrl.replace(/\/$/, "");

    return baseUrl || "";
  }

  protected transformOptions(options: RequestInit): Promise<RequestInit> {
    const dnnHeaders = this.sf.getModuleHeaders();

    dnnHeaders.forEach((value, key) => {
      options.headers[key] = value;
    });

    return Promise.resolve(options);
  }
}

export class LocalizationClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigureRequest, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Gets localization keys and values.
     * @return OK
     */
    getLocalization(signal?: AbortSignal | undefined): Promise<LocalizationViewModel> {
        let url_ = this.baseUrl + "/Localization/GetLocalization";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetLocalization(_response);
        });
    }

    protected processGetLocalization(response: Response): Promise<LocalizationViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LocalizationViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LocalizationViewModel>(null as any);
    }
}

export class SecurityClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigureRequest, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Gets all the DNN security bulletins.
     * @param versionString The version for which to get the security bulletins for in the format 090202 for v9.9.2.
     * @return A list of DNN security bulletins.
     */
    getSecurityBulletins(versionString: string | null, signal?: AbortSignal | undefined): Promise<SecurityBulletinsViewModel> {
        let url_ = this.baseUrl + "/Security/GetSecurityBulletins?";
        if (versionString === undefined)
            throw new Error("The parameter 'versionString' must be defined.");
        else if(versionString !== null)
            url_ += "versionString=" + encodeURIComponent("" + versionString) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetSecurityBulletins(_response);
        });
    }

    protected processGetSecurityBulletins(response: Response): Promise<SecurityBulletinsViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SecurityBulletinsViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SecurityBulletinsViewModel>(null as any);
    }
}

/** A viewmodel that exposes all resource keys in strong types. */
export class LocalizationViewModel implements ILocalizationViewModel {
    /** Localized strings present the ModelValidation resources. */
    modelValidation?: ModelValidationInfo | undefined;
    /** Localized strings present the UI resources. */
    uI?: UIInfo | undefined;

    constructor(data?: ILocalizationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelValidation = _data["ModelValidation"] ? ModelValidationInfo.fromJS(_data["ModelValidation"]) : <any>undefined;
            this.uI = _data["UI"] ? UIInfo.fromJS(_data["UI"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LocalizationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ModelValidation"] = this.modelValidation ? this.modelValidation.toJSON() : <any>undefined;
        data["UI"] = this.uI ? this.uI.toJSON() : <any>undefined;
        return data;
    }
}

/** A viewmodel that exposes all resource keys in strong types. */
export interface ILocalizationViewModel {
    /** Localized strings present the ModelValidation resources. */
    modelValidation?: ModelValidationInfo | undefined;
    /** Localized strings present the UI resources. */
    uI?: UIInfo | undefined;
}

/** Localized strings for the ModelValidation resources. */
export class ModelValidationInfo implements IModelValidationInfo {
    /** Gets or sets the IdGreaterThanZero localized text. */
    idGreaterThanZero?: string | undefined;
    /** Gets or sets the NameRequired localized text. */
    nameRequired?: string | undefined;

    constructor(data?: IModelValidationInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idGreaterThanZero = _data["IdGreaterThanZero"];
            this.nameRequired = _data["NameRequired"];
        }
    }

    static fromJS(data: any): ModelValidationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModelValidationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IdGreaterThanZero"] = this.idGreaterThanZero;
        data["NameRequired"] = this.nameRequired;
        return data;
    }
}

/** Localized strings for the ModelValidation resources. */
export interface IModelValidationInfo {
    /** Gets or sets the IdGreaterThanZero localized text. */
    idGreaterThanZero?: string | undefined;
    /** Gets or sets the NameRequired localized text. */
    nameRequired?: string | undefined;
}

/** Localized strings for the UI resources. */
export class UIInfo implements IUIInfo {
    /** Gets or sets the DnnPlatformVersion localized text. */
    dnnPlatformVersion?: string | undefined;
    /** Gets or sets the DnnSecurityCenter localized text. */
    dnnSecurityCenter?: string | undefined;

    constructor(data?: IUIInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dnnPlatformVersion = _data["DnnPlatformVersion"];
            this.dnnSecurityCenter = _data["DnnSecurityCenter"];
        }
    }

    static fromJS(data: any): UIInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UIInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DnnPlatformVersion"] = this.dnnPlatformVersion;
        data["DnnSecurityCenter"] = this.dnnSecurityCenter;
        return data;
    }
}

/** Localized strings for the UI resources. */
export interface IUIInfo {
    /** Gets or sets the DnnPlatformVersion localized text. */
    dnnPlatformVersion?: string | undefined;
    /** Gets or sets the DnnSecurityCenter localized text. */
    dnnSecurityCenter?: string | undefined;
}

/** A viewmodel that represents DNN Security Bulletins. */
export class SecurityBulletinsViewModel implements ISecurityBulletinsViewModel {
    /** Gets or sets the title of the RSS feed. */
    title?: string | undefined;
    /** Gets or sets the url to download DNN Platform. */
    link?: string | undefined;
    /** Gets or sets the RSS feed description. */
    description?: string | undefined;
    /** Gets or sets the list of security bulletins. */
    bulletins?: Bulletin[] | undefined;

    constructor(data?: ISecurityBulletinsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["Title"];
            this.link = _data["Link"];
            this.description = _data["Description"];
            if (Array.isArray(_data["Bulletins"])) {
                this.bulletins = [] as any;
                for (let item of _data["Bulletins"])
                    this.bulletins!.push(Bulletin.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SecurityBulletinsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SecurityBulletinsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["Link"] = this.link;
        data["Description"] = this.description;
        if (Array.isArray(this.bulletins)) {
            data["Bulletins"] = [];
            for (let item of this.bulletins)
                data["Bulletins"].push(item.toJSON());
        }
        return data;
    }
}

/** A viewmodel that represents DNN Security Bulletins. */
export interface ISecurityBulletinsViewModel {
    /** Gets or sets the title of the RSS feed. */
    title?: string | undefined;
    /** Gets or sets the url to download DNN Platform. */
    link?: string | undefined;
    /** Gets or sets the RSS feed description. */
    description?: string | undefined;
    /** Gets or sets the list of security bulletins. */
    bulletins?: Bulletin[] | undefined;
}

/** Represents a single DNN Security Bulletin. */
export class Bulletin implements IBulletin {
    /** Gets or sets a link to the detailed security bulletin. */
    link?: string | undefined;
    /** Gets or sets the title of the bulletin. */
    title?: string | undefined;
    /** Gets or sets the short description of the bulletin. */
    description?: string | undefined;
    /** Gets or sets a string representing the date of announcement. */
    publicationDateUtc!: Date;

    constructor(data?: IBulletin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.link = _data["Link"];
            this.title = _data["Title"];
            this.description = _data["Description"];
            this.publicationDateUtc = _data["PublicationDateUtc"] ? new Date(_data["PublicationDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Bulletin {
        data = typeof data === 'object' ? data : {};
        let result = new Bulletin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Link"] = this.link;
        data["Title"] = this.title;
        data["Description"] = this.description;
        data["PublicationDateUtc"] = this.publicationDateUtc ? this.publicationDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

/** Represents a single DNN Security Bulletin. */
export interface IBulletin {
    /** Gets or sets a link to the detailed security bulletin. */
    link?: string | undefined;
    /** Gets or sets the title of the bulletin. */
    title?: string | undefined;
    /** Gets or sets the short description of the bulletin. */
    description?: string | undefined;
    /** Gets or sets a string representing the date of announcement. */
    publicationDateUtc: Date;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

export interface ConfigureRequest {
  moduleId: number;
}